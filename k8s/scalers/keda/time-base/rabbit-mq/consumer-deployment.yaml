apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq-consumer
  labels:
    app: rabbitmq-consumer
spec:
  replicas: 0  # Start with zero replicas; KEDA will scale this up
  selector:
    matchLabels:
      app: rabbitmq-consumer
  template:
    metadata:
      labels:
        app: rabbitmq-consumer
    spec:
      containers:
      - name: consumer
        image: focker.ir/python:3.9
        command: ["python", "-u", "-c"]
        args:
          - |
            import pika
            import time
            import os
            connection = pika.BlockingConnection(pika.ConnectionParameters(
                host=os.environ['RABBITMQ_HOST'],
                port=5672,
                credentials=pika.PlainCredentials('user', os.environ['RABBITMQ_PASSWORD'])
            ))
            channel = connection.channel()
            channel.queue_declare(queue='task_queue')
            def callback(ch, method, properties, body):
                print(f" [x] Received {body}")
                time.sleep(1)  # Simulate work
                print(" [x] Done")
                ch.basic_ack(delivery_tag=method.delivery_tag)
            channel.basic_qos(prefetch_count=1)
            channel.basic_consume(queue='task_queue', on_message_callback=callback)
            print(' [*] Waiting for messages. To exit press CTRL+C')
            channel.start_consuming()
        env:
        - name: RABBITMQ_HOST
          value: rabbitmq.rabbitmq.svc.cluster.local
        - name: RABBITMQ_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rabbitmq
              key: rabbitmq-password